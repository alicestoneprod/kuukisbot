import {
  WeatherKey,
  TelegramToken,
  themes,
  time,
} from "./modules/constants.mjs"
import TelegramBot from "node-telegram-bot-api"
import fs from "fs"
import weather from "openweather-apis"
import axios from "axios"

weather.setLang("ru")
weather.setUnits("metric")
weather.setAPPID(WeatherKey)

const bot = new TelegramBot(TelegramToken, { polling: true })

bot.onText(/\/echo (.+)/, (msg, match) => {
  const chatId = msg.chat.id

  bot.sendMessage(chatId, resp)
})

bot.on("message", (msg) => {
  const chatId = msg.chat.id
  if (msg.text == "–ö–∞–∫ –¥–µ–ª–∞?") {
    bot.sendMessage(chatId, "–•–æ—Ä–æ—à–æ!")
  } else if (
    msg.text.toLowerCase() == "–∫—É–±–∏–∫" ||
    msg.text.toLowerCase().includes("/cube")
  ) {
    bot.sendDice(chatId)
  } else if (
    msg.text.toLowerCase() == "–∞—Ä—É" ||
    msg.text.toLowerCase() == "–æ—Ä—É"
  ) {
    bot.sendMessage(chatId, "–û—Ä—É—Ç, –∫–æ–≥–¥–∞ –µ–±—É—Ç")
  } else if (
    msg.text.toLowerCase() == "–º–æ–Ω–µ—Ç–∫–∞" ||
    msg.text.toLowerCase().includes("/coin")
  ) {
    const i = Math.round(Math.random())
    if (i == 1) {
      bot.sendMessage(chatId, "–í—ã–ø–∞–ª–∞ –†–µ—à–∫–∞.")
    } else {
      bot.sendMessage(chatId, "–í—ã–ø–∞–ª –û—Ä—ë–ª.")
    }
  } else if (
    msg.text.toLowerCase() == "–∞–ª–∏—Å–∞ –ø–æ–º–æ—â—å" ||
    msg.text.toLowerCase() == "/help" ||
    msg.text.toLowerCase().includes("/start")
  ) {
    bot.sendMessage(
      chatId,
      `–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥: 
      ü™ô <b>–ú–æ–Ω–µ—Ç–∫–∞</b>  - –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É
      üé≤ <b>–ö—É–±–∏–∫</b> - –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫;
      ‚ùì <b>–ê–ª–∏—Å–∞ –ø–æ–º–æ—â—å </b> - –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. (—Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ /help);
      üíµ <b>–î–æ–ª–ª–∞—Ä</b> - —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞;
      üí∂ <b>–ï–≤—Ä–æ</b> - —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å –µ–≤—Ä–æ;
      ü™ô <b>–ë–∏—Ç–∫–æ–∏–Ω</b> - —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞;
      üÜïüòπ <b>–ê–Ω–µ–∫–¥–æ—Ç</b> - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç;
      üÜïüòπ <b>–ê–Ω–µ–∫–¥–æ—Ç</b> <i>–¥–ª—è –¥—Ä—É–∑–µ–π</i> - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç –Ω–∞ —Ç–µ–º—É "–¥–ª—è –¥—Ä—É–∑–µ–π"; –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã: <b>18+</b>, <b>–ø—Ä–æ –º–µ–Ω—Ç–∞</b>, <b>4</b> (4 —Å–±–æ—Ä–Ω–∏–∫), <b>–¥–ª—è –¥—Ä—É–∑–µ–π</b>. –°–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω—è—Ç—å—Å—è!
      üÜï‚õÖÔ∏è <b>–ü—Ä–æ–≥–Ω–æ–∑ –ú–æ—Å–∫–≤–∞</b> - —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –≥.–ú–æ—Å–∫–≤–∞, –Ω–∞ –º–µ—Å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ú–æ—Å–∫–≤–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥;
      üÜï‚òÄÔ∏è <b>–ü–æ–≥–æ–¥–∞ –ú–æ—Å–∫–≤–∞</b> - —É–∑–Ω–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤–æ–∑–¥—É—Ö–∞ –≤ –≥.–ú–æ—Å–∫–≤–∞, –Ω–∞ –º–µ—Å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ú–æ—Å–∫–≤–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥;
      üÜïüçÄ <b>–®–∞–Ω—Å</b> <i>—Ç–µ–∫—Å—Ç</i> - —É–∑–Ω–∞—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –æ—Ç 1 –¥–æ 100 –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.

      üî∫–°–ª—É–∂–µ–±–Ω–æ–µ:
      /chatid - —É–∑–Ω–∞—Ç—å ID —á–∞—Ç–∞ –∏ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`,
      { parse_mode: "HTML" }
    )
  } else if (msg.text.toLowerCase().includes("/chatid")) {
    bot.sendMessage(
      chatId,
      `ID —á–∞—Ç–∞: ${chatId} \n–ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${msg.chat.username}
      `
    )
  } else if (msg.text.toLowerCase().includes("–ø—Ä–æ–≥–Ω–æ–∑")) {
    if (msg.text.toLowerCase() == "–ø—Ä–æ–≥–Ω–æ–∑") {
      bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥.")
    } else {
      let massiv = msg.text.split(" ")
      let cityName = massiv[1]
      axios
        .get(
          `https://api.openweathermap.org/data/2.5/forecast?q=${encodeURIComponent(
            cityName
          )}&appid=${WeatherKey}`
        )
        .then((response) => {
          let forecastList = response.data.list
          let forecastText = `–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –≥.${cityName} –Ω–∞ 5 –¥–Ω–µ–π:\n\n`

          for (let i = 0; i < forecastList.length; i += 8) {
            let forecastDate = new Date(forecastList[i].dt * 1000)
            let forecastTemp =
              Math.round(forecastList[i].main.temp - 273.15) + 2
            let forecastDescription = forecastList[i].weather[0].description
            //–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤:
            if (forecastDescription === "overcast clouds") {
              forecastDescription = "‚òÅÔ∏è –ø–∞—Å–º—É—Ä–Ω–æ "
            } else if (forecastDescription === "broken clouds") {
              forecastDescription = "üå§ –æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ "
            } else if (forecastDescription === "light rain") {
              forecastDescription = "üåß –Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å "
            } else if (forecastDescription === "few clouds") {
              forecastDescription = "‚õÖÔ∏è —Å–ª–µ–≥–∫–∞ –æ–±–ª–∞—á–Ω–æ"
            } else if (forecastDescription === "scattered clouds") {
              forecastDescription = "üå§ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å"
            } else if (forecastDescription === "clear sky") {
              forecastDescription = "‚òÄÔ∏è —è—Å–Ω–æ"
            } else if (forecastDescription === "moderate rain") {
              forecastDescription = "üåß —É–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å "
            }

            forecastText += `${forecastDate.toLocaleDateString("ru-RU", {
              weekday: "long",
            })}: ${forecastTemp}¬∞C, ${forecastDescription}\n`
          }

          bot.sendMessage(chatId, forecastText)
        })
        .catch((error) => {
          bot.sendMessage(
            chatId,
            `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥.${cityName}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ –≥–æ—Ä–æ–¥, –ª–∏–±–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–¥–Ω–µ–µ.`
          )
        })
    }
  } else if (msg.text.toLowerCase().includes("–ø–æ–≥–æ–¥–∞")) {
    if (msg.text.toLowerCase() == "–ø–æ–≥–æ–¥–∞") {
      bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥.")
    } else {
      let massiv = msg.text.split(" ")
      let cityName = massiv[1]
      axios
        .get(
          `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(
            cityName
          )}&appid=550f3c04fdcb23cdcb3ad42f6392fd92`
        )
        .then((response) => {
          weather.setCity(cityName)
          weather.getTemperature(function (err, temp) {
            if (err) {
              bot.sendMessage(chatId, `–û—à–∏–±–∫–∞: ${err}`)
            } else if (!err) {
              weather.getHumidity(function (err, hum) {
                if (err) {
                  bot.sendMessage(chatId, `–û—à–∏–±–∫–∞: ${err}`)
                } else if (!err) {
                  weather.getPressure(function (err, press) {
                    if (err) {
                      bot.sendMessage(chatId, `–û—à–∏–±–∫–∞: ${err}`)
                    } else if (!err) {
                      weather.getSmartJSON(function (err, json) {
                        if (err) {
                          bot.sendMessage(chatId, `–û—à–∏–±–∫–∞: ${err}`)
                        }
                        console.log(json)
                        press = Math.round(press / 1.333)
                        const formattedMessage = `–ü–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–≥–æ–¥—ã –≤ –≥.${cityName} –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–∑–≤–µ—Å—Ç–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ:
üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: ${Math.round(temp + 1.5)}¬∞C, ${json.description} 
üíß –ü—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–∂–Ω–æ—Å—Ç–∏: ${hum}%
üå¨Ô∏è –î–∞–≤–ª–µ–Ω–∏–µ: ${press} –º–º.—Ä—Ç.—Å—Ç.
`
                        bot.sendMessage(chatId, formattedMessage)
                      })
                    }
                  })
                }
              })
            }
          })
        })
        .catch((error) => {
          bot.sendMessage(
            chatId,
            `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥.${cityName}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–¥–Ω–µ–µ.`
          )
        })
    }
  } else if (
    msg.text.toLowerCase().includes("/btc") ||
    msg.text.toLowerCase() == "–±–∏—Ç–∫–æ–∏–Ω"
  ) {
    fetch("https://blockchain.info/ru/ticker")
      .then((response) => response.json())
      .then((data) => {
        const priceRUB = data.RUB.sell
        const priceUSD = data.USD.sell
        const priceEUR = data.EUR.sell

        const message = `\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å BTC –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç</b>:
          <b>–í —Ä—É–±–ª—è—Ö:</b> ${Math.round(priceRUB)} ‚ÇΩ
          <b>–í –¥–æ–ª–ª–∞—Ä–∞—Ö:</b> ${Math.round(priceUSD)} üíµ
          <b>–í –µ–≤—Ä–æ:</b>  ${Math.round(priceEUR)} üí∂`

        bot.sendMessage(chatId, message, { parse_mode: "HTML" })
      })
      .catch((error) => {
        console.error(error)
      })
  } else if (
    msg.text.toLowerCase().includes("/usd") ||
    msg.text.toLowerCase() == "–¥–æ–ª–ª–∞—Ä"
  )
    fetch("https://www.cbr-xml-daily.ru/daily_json.js")
      .then((response) => response.json())
      .then((data1) => {
        const USD = data1.Valute.USD.Value
        bot.sendSticker(
          chatId,
          "CAACAgIAAxkBAAEI8ytkXSG-Btp4D_zdLdG2Brcb5na85gAC8QEAAladvQohKm5i6iYv7i8E"
        )
        bot.sendMessage(chatId, "–í—ã—á–∏—Å–ª—è—é –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞...")
        let msgId = msg.message_id + 2
        setTimeout(() => {
          bot.sendMessage(
            chatId,
            `–°—Ç–æ–∏–º–æ—Å—Ç—å 1 üíµ <b>–î–æ–ª–ª–∞—Ä–∞</b> –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç:\n ‚û§ ${USD.toFixed(
              2
            )} <b>—Ä—É–±–ª–µ–π.</b>`,
            { parse_mode: "HTML" }
          )
        }, 3000)
        setTimeout(() => {
          bot.deleteMessage(chatId, msgId)
          bot.deleteMessage(chatId, msgId - 1)
        }, 3500)
      })
      .catch((error) => {
        console.error(error)
      })
  else if (
    msg.text.toLowerCase().includes("/eur") ||
    msg.text.toLowerCase() == "–µ–≤—Ä–æ"
  )
    fetch("https://www.cbr-xml-daily.ru/daily_json.js")
      .then((response) => response.json())
      .then((data1) => {
        const EUR = data1.Valute.EUR.Value
        bot.sendSticker(
          chatId,
          "CAACAgIAAxkBAAEI8ytkXSG-Btp4D_zdLdG2Brcb5na85gAC8QEAAladvQohKm5i6iYv7i8E"
        )
        bot.sendMessage(chatId, "–í—ã—á–∏—Å–ª—è—é –∫—É—Ä—Å –µ–≤—Ä–æ...")
        let msgId = msg.message_id + 2
        setTimeout(() => {
          bot.sendMessage(
            chatId,
            `–°—Ç–æ–∏–º–æ—Å—Ç—å 1 üí∂ <b>–ï–≤—Ä–æ</b> –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç:\n ‚û§ ${EUR.toFixed(
              2
            )} <b>—Ä—É–±–ª–µ–π.</b>`,
            { parse_mode: "HTML" }
          )
        }, 3000)

        setTimeout(() => {
          bot.deleteMessage(chatId, msgId)
          bot.deleteMessage(chatId, msgId - 1)
        }, 3500)
      })
      .catch((error) => {
        console.error(error)
      })
  else if (
    msg.text.toLowerCase().includes("/anek_friend") ||
    msg.text.toLowerCase() == "–∞–Ω–µ–∫–¥–æ—Ç –¥–ª—è –¥—Ä—É–∑–µ–π"
  ) {
    fs.readFile("–∞–Ω–µ–∫–¥–æ—Ç—ã_–¥–ª—è_–¥—Ä—É–∑–µ–π.txt", "utf8", (err, data) => {
      if (err) {
        console.error(err)
        return
      }

      const jokes = data.split("* * *")

      const randomIndex = Math.floor(Math.random() * jokes.length)
      const resultanekdot = `${jokes[randomIndex]}`
      bot.sendMessage(chatId, resultanekdot)
    })
  } else if (
    msg.text.toLowerCase().includes("/anek_ment") ||
    msg.text.toLowerCase() == "–∞–Ω–µ–∫–¥–æ—Ç –ø—Ä–æ –º–µ–Ω—Ç–∞"
  ) {
    fs.readFile("–∞–Ω–µ–∫–¥–æ—Ç—ã_–ø—Ä–æ_–º–µ–Ω—Ç–∞.txt", "utf8", (err, data) => {
      if (err) {
        console.error(err)
        return
      }

      const jokes = data.split("* * *")

      const randomIndex = Math.floor(Math.random() * jokes.length)
      const resultanekdot = `${jokes[randomIndex]}`
      bot.sendMessage(chatId, resultanekdot)
    })
  } else if (
    msg.text.toLowerCase().includes("/anek_18+") ||
    msg.text.toLowerCase() == "–∞–Ω–µ–∫–¥–æ—Ç 18+"
  ) {
    fs.readFile("–∞–Ω–µ–∫–¥–æ—Ç—ã_18+.txt", "utf8", (err, data) => {
      if (err) {
        console.error(err)
        return
      }

      const jokes = data.split("* * *")

      const randomIndex = Math.floor(Math.random() * jokes.length)
      const resultanekdot = `${jokes[randomIndex]}`
      bot.sendMessage(chatId, resultanekdot)
    })
  } else if (
    msg.text.toLowerCase().includes("/anek_4") ||
    msg.text.toLowerCase() == "–∞–Ω–µ–∫–¥–æ—Ç 4"
  ) {
    fs.readFile("–∞–Ω–µ–∫–¥–æ—Ç—ã_4.txt", "utf8", (err, data) => {
      if (err) {
        console.error(err)
        return
      }
      const jokes = data.split("\n")
      const randomIndex = Math.floor(Math.random() * jokes.length)
      const resultanekdot = `${jokes[randomIndex]}`
      bot.sendMessage(chatId, resultanekdot)
    })
  } else if (
    msg.text.toLowerCase().includes("/anek") ||
    msg.text.toLowerCase() == "–∞–Ω–µ–∫–¥–æ—Ç"
  ) {
    fs.readFile("–∞–Ω–µ–∫–¥–æ—Ç—ã.txt", "utf8", (err, data) => {
      if (err) {
        console.error(err)
        return
      }
      const jokes = data.split("* * *")
      const randomIndex = Math.floor(Math.random() * jokes.length)
      const resultanekdot = `${jokes[randomIndex]}`
      bot.sendMessage(chatId, resultanekdot)
    })
  } else if (msg.text.toLowerCase() == "help") {
    bot.sendMessage(
      chatId,
      "–í–µ—Ä–æ—è—Ç–Ω–æ, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–º–æ—â—å? –¢–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help."
    )
  } else if (msg.text.toLowerCase().includes("—à–∞–Ω—Å")) {
    if (msg.text.toLowerCase() === "—à–∞–Ω—Å") {
      bot.sendMessage(
        chatId,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å."
      )
    } else {
      const checkMsgChance = msg.text.split(" ")
      if (checkMsgChance[0] === "—à–∞–Ω—Å" || checkMsgChance[0] === "–®–∞–Ω—Å") {
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 100 —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º:
        const randomChance = Math.floor(Math.random() * 100) + 1
        if (randomChance >= 85 && randomChance <= 100) {
          bot.sendMessage(chatId, `–í—Å–µ –≤–µ—Ä–Ω–æ.`)
        }
        if (randomChance >= 70 && randomChance <= 84) {
          bot.sendMessage(chatId, `–ó–≤–∏–∑–¥–µ–∂ –ø–æ–ª–Ω—ã–π.`)
        } else {
          bot.sendMessage(chatId, `–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è - ${randomChance}%. `)
        }
      }
    }
  }

  fs.appendFile(
    "logs.txt",
    `\n–°–æ–æ–±—â–µ–Ω–∏–µ: '${
      msg.text
    }' –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ –≤ ${time.getHours()}h ${time.getMinutes()}m - ${time.getDay()}.${time.getMonth()}.${time.getFullYear()} –∏ –Ω–∞–ø–∏—Å–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @${
      msg.chat.username
    }`,
    (err) => {}
  )
})

let isReporting = false

bot.on("message", (msg) => {
  const chatId = msg.chat.id

  if (msg.text.toLowerCase() === "/report") {
    isReporting = true
    bot.sendMessage(
      chatId,
      `üîß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å, –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –±—ã—Å—Ç—Ä–µ–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É.

üì∏ –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∫ —Å–≤–æ–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.

‚ùó <b><i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (–∫—Ä–æ–º–µ /exit –∏ —Å–ª–æ–≤–∞ "–æ—Ç–º–µ–Ω–∞") –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞, –≤ —ç—Ç–æ–º –Ω–µ—Ç —Å–º—ã—Å–ª–∞.</i></b>.

‚ö†Ô∏è –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã —Å–ª—É—á–∞–π–Ω–æ —Å—é–¥–∞ –ø–æ–ø–∞–ª–∏ –∏–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ "–æ—Ç–º–µ–Ω–∞" –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /exit`,
      { parse_mode: "HTML" }
    )
  } else if (
    isReporting &&
    msg.text.toLowerCase() !== "–æ—Ç–º–µ–Ω–∞" &&
    msg.text.toLowerCase() !== "/exit"
  ) {
    bot.on("photo", (msg) => {
      const photo = msg.photo[msg.photo.length - 1]
      bot.sendPhoto(-1001911341493, photo.file_id)
    })
    bot.sendMessage(
      chatId,
      `‚úÖüìß –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞.

üöÄ –ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.`
    )
    bot.sendMessage(-1001911341493, `<b>–ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π report:</b>`, {
      parse_mode: "HTML",
    })
    setTimeout(() => {
      bot.forwardMessage(-1001911341493, chatId, msg.message_id)
    }, 3000)
    
    isReporting = false
  } else if (
    isReporting &&
    (msg.text.toLowerCase() === "–æ—Ç–º–µ–Ω–∞" || msg.text.toLowerCase() === "/exit")
  ) {
    isReporting = false
    bot.sendMessage(
      chatId,
      `‚ö†Ô∏è –í—ã –≤—ã—à–ª–∏ –∏–∑ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–ø–æ—Ä—Ç–∞.

üìå –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è.

üì© –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –≤–∞–º –ø–æ–º–æ—á—å.

üîß –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞! üòäüìÆ`
    )
  }
})

// const writeReportIn = function (isReporting) {
//   fs.writeFile("reportStatus.txt", isReporting.toString(), (err) => {
//     if (err) {
//       console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:", err)
//       return
//     }
//   })
// }

// const checkStatus = function () {
//   return new Promise((resolve, reject) => {
//     fs.readFile("reportStatus.txt", "utf-8", (err, data) => {
//       if (err) {
//         console.error("–û—à–∏–±–∫–∞!", err)
//         reject(err)
//       }

//       let isReported = data
//       resolve(isReported)
//     })
//   })
// }
